from maas_common import metric
from maas_common import metric_bool
from maas_common import print_output
from maas_common import status_ok
from maas_common import status
from maas_common import status_err
import lxc
import tempfile
import re
import datetime

def check_splunk_forwarder(container_name='', checkInterval=60):
      
      metrics = {'splunkd_active' : False, 'splunkd_connected' : False, 'splunkd_shipping' : False}
      cont = lxc.Container(container_name)

      if not (cont.init_pid > 1 and
              cont.running and
              cont.state == "RUNNING"):
          raise maas_common.MaaSException('Container %s not in running state' %
                                           cont.name)

      try:
         with tempfile.TemporaryFile() as tmpfile:
            # Is Splunk running?
            if cont.attach_wait(lxc.attach_run_command, ['service', 'splunk', 'status'], stdout=tmpfile) > -1:
               tmpfile.seek(0)
               output = tmpfile.read()
               
               if "splunkd is running" in output:
                  metrics['splunkd_active'] = True

            # Is Splunk connected to the home base?
            if cont.attach_wait(lxc.attach_run_command, ['netstat', '-ntap'], stdout=tmpfile) > -1:
               tmpfile.seek(0)
               output = tmpfile.read()
               
               result = re.search('ESTABLISHED ([0-9]){1,6}/splunkd', output)
               if result.group(0):
                  metrics['splunkd_connected'] = True

            # Are logs actively being shipped to the log file Splunk monitors?
            if cont.attach_wait(lxc.attach_run_command, ['ls', '-l', '/var/backup/rsyslog/rsyslog-aggregate.log'], stdout=tmpfile) > -1:
               tmpfile.seek(0)
               output = tmpfile.read()
               
               modTimestamp = re.search('([A-Za-z]{3}) ([0-9]){2} ([0-9]){2}:([0-9]){2}', output)
               currTime = str(datetime.datetime.utcnow('%b %d %H:%m'))

               if not modTimestamp is None:
                 if currTime == modTimestamp.group(0):
                   metrics['splunkd_shipping'] = True
 
        catch Exception as e:
          print e
        finally:
          return metrics

               
def main():
  print check_splunk_forwarder(container_name='813078-logging01_rsyslog_container-44935410', checkInterval=60) 
  
